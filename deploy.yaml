# .github/workflows/publish.yml
name: Build and Deploy to AKS

on:
  push:
    branches: [ master ]  # Or 'main' depending on your branch

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      VERSION: v1.0.0
      IMAGE_NAME: arithmetic-service

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Java 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build project (skip tests)
      run: mvn --batch-mode -DskipTests package

    - name: Run unit tests
      run: mvn test

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: practicum07registry.azurecr.io
        username: ${{ secrets.AZURE_USERNAME }}
        password: ${{ secrets.AZURE_PASSWORD }}

    - name: Build and push image to ACR
      run: |
        docker build -t practicum07registry.azurecr.io/arithmetic-service:v1.0.0 .
        docker push practicum07registry.azurecr.io/arithmetic-service:v1.0.0

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3

    - name: Set kubeconfig from secret
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
        export KUBECONFIG=$PWD/kubeconfig

    - name: Make deploy.sh executable
      run: chmod +x ./deploy.sh

    - name: Deploy to AKS
      run: ./deploy.sh

---

# deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: arithmetic-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: arithmetic-service
  template:
    metadata:
      labels:
        app: arithmetic-service
    spec:
      containers:
        - name: arithmetic-service
          image: practicum07registry.azurecr.io/arithmetic-service:v1.0.0
          imagePullPolicy: IfNotPresent
          env:
            - name: PORT
              value: "5000"
---
apiVersion: v1
kind: Service
metadata:
  name: arithmetic-service
spec:
  selector:
    app: arithmetic-service
  type: LoadBalancer
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30000
